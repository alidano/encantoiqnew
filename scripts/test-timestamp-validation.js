// Script de prueba para validar la funci√≥n de conversi√≥n de timestamps
// Este script simula la l√≥gica de convertTimestamp para probar diferentes valores

console.log('üß™ Probando validaci√≥n de timestamps...\n');

// Funci√≥n de conversi√≥n de timestamps (copiada del sync)
function convertTimestamp(timestamp) {
  if (!timestamp) return null;
  try {
    // Si es un string con comas, limpiarlo
    const cleanTimestamp = timestamp.toString().replace(/,/g, '');
    const unixTime = parseInt(cleanTimestamp);
    
    // Validar que sea un n√∫mero v√°lido
    if (isNaN(unixTime)) return null;
    
    // Validar que est√© en un rango razonable (desde 1970 hasta 2030)
    const minTimestamp = 0; // 1 enero 1970
    const maxTimestamp = 1893456000; // 1 enero 2030
    
    if (unixTime < minTimestamp || unixTime > maxTimestamp) {
      console.log(`‚ö†Ô∏è  Timestamp fuera de rango v√°lido: ${unixTime} (${new Date(unixTime * 1000).toISOString()})`);
      return null;
    }
    
    // Mantener como bigint (timestamp Unix) para Supabase
    return unixTime;
  } catch (error) {
    console.log(`‚ö†Ô∏è  Error converting timestamp ${timestamp}:`, error);
    return null;
  }
}

// Funci√≥n de validaci√≥n de fecha de licencia
function validateLicenseDate(year, month, day = '01') {
  if (!year || !month) return null;
  
  try {
    // Validar que a√±o, mes y d√≠a sean n√∫meros v√°lidos
    const yearNum = parseInt(year.toString());
    const monthNum = parseInt(month.toString());
    const dayNum = parseInt(day.toString());
    
    if (isNaN(yearNum) || isNaN(monthNum) || isNaN(dayNum)) return null;
    
    // Validar rangos razonables
    if (yearNum < 1900 || yearNum > 2030) return null;
    if (monthNum < 1 || monthNum > 12) return null;
    if (dayNum < 1 || dayNum > 31) return null;
    
    // Crear fecha y validar que sea v√°lida
    const dateString = `${yearNum}-${monthNum.toString().padStart(2, '0')}-${dayNum.toString().padStart(2, '0')}`;
    const testDate = new Date(dateString);
    
    if (isNaN(testDate.getTime())) return null;
    
    return dateString;
  } catch (error) {
    console.log(`‚ö†Ô∏è  Error validando fecha de licencia:`, error);
    return null;
  }
}

// Casos de prueba para timestamps
const timestampTests = [
  { input: '1744948799', description: 'Timestamp futuro v√°lido (2025)' },
  { input: '1762315199', description: 'Timestamp futuro v√°lido (2025)' },
  { input: '1686369599', description: 'Timestamp pasado v√°lido (2023)' },
  { input: '1655006399', description: 'Timestamp pasado v√°lido (2022)' },
  { input: '1710561599', description: 'Timestamp futuro v√°lido (2024)' },
  { input: '0', description: 'Timestamp m√≠nimo (1970)' },
  { input: '1893456000', description: 'Timestamp m√°ximo (2030)' },
  { input: '1893456001', description: 'Timestamp fuera de rango (2030+)' },
  { input: '-1', description: 'Timestamp negativo' },
  { input: 'abc', description: 'String no num√©rico' },
  { input: '', description: 'String vac√≠o' },
  { input: null, description: 'Null' },
  { input: undefined, description: 'Undefined' },
  { input: '1,234,567', description: 'String con comas' },
];

console.log('üìÖ Pruebas de Timestamps:');
console.log('=' .repeat(50));

timestampTests.forEach((test, index) => {
  const result = convertTimestamp(test.input);
  const status = result !== null ? '‚úÖ' : '‚ùå';
  const resultStr = result !== null ? `${result} (${new Date(result * 1000).toISOString()})` : 'null';
  
  console.log(`${index + 1}. ${status} ${test.description}`);
  console.log(`   Input: ${test.input}`);
  console.log(`   Output: ${resultStr}`);
  console.log('');
});

// Casos de prueba para fechas de licencia
const licenseDateTests = [
  { year: '2025', month: '12', day: '31', description: 'Fecha v√°lida futura' },
  { year: '2020', month: '6', day: '15', description: 'Fecha v√°lida pasada' },
  { year: '1900', month: '1', day: '1', description: 'Fecha m√≠nima v√°lida' },
  { year: '2030', month: '12', day: '31', description: 'Fecha m√°xima v√°lida' },
  { year: '1899', month: '12', day: '31', description: 'A√±o muy antiguo' },
  { year: '2031', month: '1', day: '1', description: 'A√±o muy futuro' },
  { year: '2024', month: '13', day: '1', description: 'Mes inv√°lido' },
  { year: '2024', month: '0', day: '1', description: 'Mes cero' },
  { year: '2024', month: '12', day: '32', description: 'D√≠a inv√°lido' },
  { year: '2024', month: '12', day: '0', description: 'D√≠a cero' },
  { year: 'abc', month: '12', day: '1', description: 'A√±o no num√©rico' },
  { year: '2024', month: 'abc', day: '1', description: 'Mes no num√©rico' },
  { year: '2024', month: '12', day: 'abc', description: 'D√≠a no num√©rico' },
  { year: null, month: '12', day: '1', description: 'A√±o null' },
  { year: '2024', month: null, day: '1', description: 'Mes null' },
];

console.log('üìã Pruebas de Fechas de Licencia:');
console.log('=' .repeat(50));

licenseDateTests.forEach((test, index) => {
  const result = validateLicenseDate(test.year, test.month, test.day);
  const status = result !== null ? '‚úÖ' : '‚ùå';
  
  console.log(`${index + 1}. ${status} ${test.description}`);
  console.log(`   Input: ${test.year}/${test.month}/${test.day}`);
  console.log(`   Output: ${result || 'null'}`);
  console.log('');
});

console.log('üéØ Resumen de Pruebas:');
console.log('=' .repeat(50));

const timestampValid = timestampTests.filter(test => convertTimestamp(test.input) !== null).length;
const licenseValid = licenseDateTests.filter(test => validateLicenseDate(test.year, test.month, test.day) !== null).length;

console.log(`üìÖ Timestamps v√°lidos: ${timestampValid}/${timestampTests.length} (${Math.round(timestampValid/timestampTests.length*100)}%)`);
console.log(`üìã Fechas de licencia v√°lidas: ${licenseValid}/${licenseDateTests.length} (${Math.round(licenseValid/licenseDateTests.length*100)}%)`);

console.log('\n‚ú® Pruebas completadas!');
